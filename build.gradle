plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.5-SNAPSHOT" apply false
    id "com.diffplug.spotless" version "6.25.0"
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${rootProject.parchment_minecraft_version}:${rootProject.parchment_version}")
        }
    }

    remapJar {
        archiveClassifier.set(project.name)
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    apply plugin: "com.diffplug.spotless"

    base {
        archivesName = rootProject.mod_id + "-" + rootProject.minecraft_version
    }

    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
        maven { url 'https://maven.neoforged.net/releases/' }
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }
        exclusiveContent {
            forRepository {
                maven {
                    url "https://cursemaven.com/"
                }
            }
            filter {
                includeGroup "curse.maven"
            }
        }
        exclusiveContent {
            forRepository {
                maven {
                    name = "Fuzs Mod Resources"
                    url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
                }
            }
            filter {
                includeGroup "fuzs.forgeconfigapiport"
            }
        }
        exclusiveContent {
            forRepository {
                maven {
                    name = "TerraformersMC"
                    url = "https://maven.terraformersmc.com/releases"
                }
            }
            filter {
                includeGroup "com.terraformersmc"
            }
        }

        tasks.withType(ProcessResources).configureEach {
            var replaceProperties = [
                    minecraft_version      : rootProject.minecraft_version,
                    minecraft_version_range: rootProject.minecraft_version_range,
                    neo_version            : rootProject.neo_version,
                    neo_version_range      : rootProject.neo_version_range,
                    loader_version_range   : rootProject.loader_version_range,
                    mod_id                 : rootProject.mod_id,
                    mod_name               : rootProject.mod_name,
                    mod_license            : rootProject.mod_license,
                    mod_version            : rootProject.mod_version,
                    mod_url                : rootProject.mod_url,
                    mod_credits            : rootProject.mod_credits,
                    mod_authors            : rootProject.mod_authors,
                    mod_description        : rootProject.mod_description,
                    architectury_version   : rootProject.architectury_version,
            ]
            inputs.properties replaceProperties

            filesMatching(['META-INF/mods.toml', 'fabric.mod.json']) {
                expand replaceProperties + [project: project]
            }
        }
    }

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }

    spotless {
        ratchetFrom 'd7fc323b817eb0cadd83556a2d6e0fb943c27946'

        format 'misc', {
            target '*.gradle', '.gitattributes', '.gitignore'

            trimTrailingWhitespace()
            indentWithSpaces()
            endWithNewline()
        }
        java {
            googleJavaFormat()
            formatAnnotations()
            removeUnusedImports()

            indentWithTabs(2)
            indentWithSpaces(4)

            licenseHeaderFile("${rootProject.projectDir}/.spotless/licenseHeaderLegacy.txt")
                    .named("license-header-legacy")
                    .onlyIfContentMatches("Copyright \\(C\\) \\d{4}(?:-\\d{4})? Leo3418 <https://github\\.com/Leo3418>")
            licenseHeaderFile("${rootProject.projectDir}/.spotless/licenseHeader.txt")
                    .onlyIfContentMatches("Copyright \\(C\\) \\d{4}(?:-\\d{4})? Ambossmann <https:\\/\\/github\\.com\\/Ambossmann>\\n \\*\\n")
        }
    }
}
